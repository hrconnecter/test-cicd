name: SonarQube Manual Scan

on:
  workflow_dispatch:  # Enables manual trigger from GitHub UI

jobs:
  sonar:
    name: SonarQube Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
         fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Dependencies
      run: npm install

    - name: Run Tests and Generate Coverage
      run: npm test -- --coverage

    - name: Run SonarQube Scanner
      run: npx sonarqube-scanner
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}












# name: SonarQube Scan Workflow

# on:
#   workflow_call:
#     secrets:
#       SONAR_TOKEN:
#         required: true

# jobs:
#   sonarqube:
#     name: SonarQube Scan and Quality Gate
#     runs-on: ubuntu-latest
#     env:
#       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       SONAR_HOST_URL: http://13.202.182.26:9000  # Updated to your public SonarQube server

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Create SonarQube Project (if not exists)
#         run: |
#           curl -s -o /dev/null -w "%{http_code}" -u $SONAR_TOKEN: \
#             -X POST "${SONAR_HOST_URL}/api/projects/create" \
#             -d "name=aegis-frontend" \
#             -d "project=aegis-frontend" || echo "Project may already exist."

#       - name: Run SonarQube Scan
#         uses: SonarSource/sonarqube-scan-action@v2.0.2
#         env:
#           SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

#       - name: Check SonarQube Quality Gate
#         uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
#         env:
#           SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
#         with:
#           sonarHostUrl: ${{ env.SONAR_HOST_URL }}
#           projectKey: aegis-frontend





# name: SonarQube Scan Workflow

# on:
#   workflow_call:

# jobs:
#   sonarqube:
#     name: SonarQube Scan and Quality Gate
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Create SonarQube Project (if not exists)
#         run: |
#           curl -s -o /dev/null -w "%{http_code}" -u ${{ secrets.SONAR_TOKEN }}: \
#             -X POST "${{ secrets.SONAR_HOST_URL }}/api/projects/create" \
#             -d "name=aegis-frontend" \
#             -d "project=aegis-frontend" || echo "Project may already exist."

#       - name: Run SonarQube Scan
#         uses: SonarSource/sonarqube-scan-action@v2.0.2
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#       - name: Check SonarQube Quality Gate
#         uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         with:
#           sonarHostUrl: ${{ secrets.SONAR_HOST_URL }}
#           projectKey: aegis-frontend



      # Optional: Fail job if Quality Gate fails
      # - name: Check Quality Gate
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
